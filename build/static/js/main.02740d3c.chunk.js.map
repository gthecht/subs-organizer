{"version":3,"sources":["subsHandler.js","pickLine.js","subsManager.js","App.js","serviceWorker.js","index.js","srt.js"],"names":["SubsHandler","updateText","event","props","changeFunction","className","this","title","onChange","value","text","placeholder","rows","React","Component","PickLine","updateUnsyncedNumber","updateSyncedNumber","name","unSyncedNumber","syncedNumber","Time","str2Num","timeStr","timeList","split","Number","replace","num2Str","timeNum","Math","floor","toString","remainder","push","round","join","SubsManager","messedUpdate","setState","messedUp","target","decodedUpdate","decoded","decodeGibberish","gibberish","lettersDict","slice","index","goodLookingUpdate","goodLooking","line1Update","boxType","linesUpdate","call","line2Update","lineNum","newLines","state","lines","includes","outputUpdate","a","async","SRT","parse","decodedObj","goodObj","getTimeTransform","timeTransform","syncSubs","syncedDecodedObj","stringify","output","badTime","startTime","goodTime","slope","intersect","time","syncedSubs","map","sub","endTime","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","srtString","times","number","srtObj","timeLine"],"mappings":"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","file":"static/js/main.02740d3c.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nclass SubsHandler extends React.Component {\r\n  updateText = (event) => {\r\n    this.props.changeFunction(event)\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"subs-window\">\r\n        <h2 className=\"title\">{ this.props.title + \":\" }</h2>\r\n        <textarea\r\n          className=\"subs-box\"\r\n          onChange={this.updateText}\r\n          value={this.props.text}\r\n          placeholder={this.props.placeholder}\r\n          rows=\"10\"\r\n        >\r\n        </textarea>\r\n        <p className=\"subs-window-description\">{this.props.placeholder}</p>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default SubsHandler;\r\n","import React from 'react';\r\n\r\nclass PickLine extends React.Component {\r\n  updateUnsyncedNumber = (event) => {\r\n    this.props.changeFunction(\"unsync\", event)\r\n  }\r\n\r\n  updateSyncedNumber = (event) => {\r\n    this.props.changeFunction(\"sync\", event)\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"line-window\">\r\n        <h2 className=\"line-name\">{ this.props.name + \":\" }</h2>\r\n        <div className=\"line-pick-box\">\r\n          <textarea\r\n            className=\"line-input\"\r\n            onChange={this.updateUnsyncedNumber}\r\n            value={this.props.unSyncedNumber}\r\n            placeholder=\"unsynced line number\"\r\n            rows=\"1\"\r\n          >\r\n          </textarea>\r\n          <textarea\r\n            className=\"line-input\"\r\n            onChange={this.updateSyncedNumber}\r\n            value={this.props.syncedNumber}\r\n            placeholder=\"synced line number\"\r\n            rows=\"1\"\r\n          >\r\n          </textarea>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default PickLine;\r\n","import React from 'react';\r\nimport SubsHandler from './subsHandler';\r\nimport PickLine from './pickLine';\r\nimport SRT from './srt';\r\n\r\nconst Time = {\r\n  str2Num: (timeStr) => {\r\n    let timeList = timeStr.split(\":\");\r\n    timeList = [Number(timeList[0]), Number(timeList[1]), Number(timeList[2].replace(\",\", \".\"))];\r\n    return 60**2 * timeList[0] + 60 * Number(timeList[1]) + timeList[2];\r\n  },\r\n\r\n  num2Str: (timeNum) => {\r\n    let timeList = [Math.floor(timeNum / 60**2).toString()];\r\n    let remainder = timeNum % 60**2;\r\n    timeList.push(Math.floor(remainder / 60).toString());\r\n    timeList.push((Math.round(1000 * (remainder % 60)) / 1000).toString());\r\n    let timeStr = timeList.join(\":\").replace(\".\", \",\");\r\n    return timeStr;\r\n  }\r\n}\r\n\r\nclass SubsManager extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      messedUp: \"\",\r\n      decoded: \"\",\r\n      goodLooking: \"\",\r\n      lines: [0, 0, 0, 0],\r\n      output: \"\"\r\n    }\r\n  }\r\n\r\n  messedUpdate = (event) => {\r\n    this.setState({ messedUp: event.target.value });\r\n    this.decodedUpdate(event.target.value);\r\n  }\r\n  \r\n  decodedUpdate = (event) => {    \r\n    if(typeof(event) === \"string\") {\r\n      this.setState({ decoded:  this.decodeGibberish(event) });\r\n    } else {\r\n      this.setState({ decoded: event.target.value });\r\n    }\r\n  }\r\n  \r\n  decodeGibberish = (gibberish) => {\r\n    let lettersDict = [\r\n      [\"à\", \"א\"],\r\n      [\"á\", \"ב\"],\r\n      [\"â\", \"ג\"],\r\n      [\"ã\", \"ד\"],\r\n      [\"ä\", \"ה\"],\r\n      [\"å\", \"ו\"],\r\n      [\"æ\", \"ז\"],\r\n      [\"ç\", \"ח\"],\r\n      [\"è\", \"ט\"],\r\n      [\"é\", \"י\"],\r\n      [\"ë\", \"כ\"],\r\n      [\"ê\", \"ך\"],\r\n      [\"ì\", \"ל\"],\r\n      [\"î\", \"מ\"],\r\n      [\"í\", \"ם\"],\r\n      [\"ð\", \"נ\"],\r\n      [\"ï\", \"ן\"],\r\n      [\"ñ\", \"ס\"],\r\n      [\"ò\", \"ע\"],\r\n      [\"ô\", \"פ\"],\r\n      [\"ó\", \"ף\"],\r\n      [\"ö\", \"צ\"],\r\n      [\"õ\", \"ץ\"],\r\n      [\"÷\", \"ק\"],\r\n      [\"ø\", \"ר\"],\r\n      [\"ù\", \"ש\"],\r\n      [\"ú\", \"ת\"]\r\n    ];\r\n\r\n    let decoded = gibberish.slice();\r\n    for (let index in lettersDict) {\r\n      decoded = decoded.split(lettersDict[index][0]).join(lettersDict[index][1]);\r\n    }\r\n    return decoded;\r\n  }\r\n\r\n  goodLookingUpdate = (event) => {\r\n    this.setState({ goodLooking: event.target.value });\r\n  }\r\n  \r\n  line1Update= (boxType, event) => {\r\n    return this.linesUpdate.call(null, 0, boxType, event);\r\n  }\r\n  \r\n  line2Update= (boxType, event) => {\r\n    return this.linesUpdate.call(null, 1, boxType, event);\r\n  }\r\n  \r\n  linesUpdate = (lineNum, boxType, event) => {\r\n    let newLines = this.state.lines.slice();\r\n    if (boxType === \"unsync\") {\r\n      newLines[2 * lineNum + 0] = Number(event.target.value);\r\n      this.setState({ lines: newLines })\r\n    } else if (boxType === \"sync\") {\r\n      newLines[2 * lineNum + 1] = Number(event.target.value);\r\n      this.setState({ lines: newLines })\r\n    }\r\n\r\n    if (!newLines.includes(0)) {\r\n      this.outputUpdate(newLines);\r\n    }\r\n  }\r\n  \r\n  outputUpdate = async (lines) => {\r\n    try {\r\n      let decodedObj = await SRT.parse(this.state.decoded);\r\n      let goodObj = await SRT.parse(this.state.goodLooking);\r\n      let timeTransform =await this.getTimeTransform(lines, decodedObj, goodObj);\r\n      let syncedDecodedObj = await this.syncSubs(decodedObj, timeTransform);\r\n      let output = await SRT.stringify(syncedDecodedObj);\r\n      this.setState({ output: output });\r\n    } catch {\r\n      this.setState({ output: \"ERROR: something's not right with your input\" });\r\n    }\r\n  }\r\n\r\n  getTimeTransform = (lines, decodedObj, goodObj) => {\r\n    let badTime = [Time.str2Num(decodedObj[lines[0] - 1].startTime), Time.str2Num(decodedObj[lines[2] - 1].startTime)];\r\n    let goodTime = [Time.str2Num(goodObj[lines[1] - 1].startTime), Time.str2Num(goodObj[lines[3] - 1].startTime)];\r\n    let slope = (goodTime[1] - goodTime[0]) / (badTime[1] - badTime[0])\r\n    let intersect = goodTime[1] - slope * badTime[1];\r\n    return (time) => {\r\n      return slope * time + intersect;\r\n    }\r\n  }\r\n  \r\n  syncSubs = (decodedObj, timeTransform) => {\r\n    let syncedSubs = decodedObj.slice();\r\n    syncedSubs.map((sub) => {\r\n      sub.startTime = Time.num2Str(timeTransform(Time.str2Num(sub.startTime)));\r\n      sub.endTime = Time.num2Str(timeTransform(Time.str2Num(sub.endTime)));\r\n      return sub;\r\n    })\r\n    return syncedSubs;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <header className=\"App-headser\">\r\n          <h1 className=\"title\">Sort out your Subtitles</h1>\r\n        </header>\r\n        <div className=\"input-window\">\r\n          <SubsHandler\r\n            title={\"Messed up subtitles\"}\r\n            text={this.state.messedUp}\r\n            placeholder={\"Copy your messed up subtitles to here.\"}\r\n            changeFunction={this.messedUpdate}\r\n            />\r\n            <SubsHandler\r\n            title={\"Decoded subtitles\"}\r\n            text={this.state.decoded}\r\n            placeholder={\"Here will be the good-looking subtitles, but the have not yet been synchronized.\"}\r\n            changeFunction={this.decodedUpdate}\r\n            />\r\n          <SubsHandler\r\n            title={\"Good-looking subtitles\"}\r\n            text={this.state.goodLooking}\r\n            placeholder={\"Copy your good subtitles to here meaning the synced subs,\"}\r\n            changeFunction={this.goodLookingUpdate}\r\n          />\r\n        </div>\r\n        <div className=\"line-pick-window\">\r\n          <div className=\"pick-one-line\">\r\n            <p className=\"line-pick-description\">\r\n              Write the numbers of two rows of subtitles that should be at the same time, one from the unsynced subs, and the other from the synced subs\r\n            </p>\r\n            <PickLine\r\n              name={\"beginning line\"}\r\n              unSyncedNumber={this.state.lines[0][0]}\r\n              syncedNumber={this.state.lines[0][1]}\r\n              changeFunction={this.line1Update}\r\n              />\r\n            <PickLine\r\n              name={\"finnishing line\"}\r\n              unSyncedNumber={this.state.lines[1][0]}\r\n              syncedNumber={this.state.lines[1][1]}\r\n              changeFunction={this.line2Update}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div className=\"output-window\">\r\n          <h1 className=\"output-title\">Synced output</h1>\r\n          <textarea\r\n            className=\"output-text-box\"\r\n            value={this.state.output}\r\n            placeholder=\"final output\"\r\n            rows=\"10\"\r\n          >\r\n          </textarea>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SubsManager;\r\n","import React from 'react';\r\nimport { Helmet } from 'react-helmet'\r\nimport SubsManager from './subsManager';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  return (\r\n      <SubsManager/>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","const SRT = {\r\n  parse: (srtString) => {\r\n    let subsList = srtString.split(\"\\n\\n\");\r\n    return subsList.map((sub) => {\r\n      let lines = sub.split(\"\\n\");\r\n      let times = lines[1].split(\" --> \")\r\n      return {\r\n        number: lines[0],\r\n        startTime: times[0],\r\n        endTime: times[1],\r\n        text: lines.slice(2).join(\"\\n\")\r\n      }\r\n    })\r\n  },\r\n\r\n  stringify: (srtObj) => {\r\n    let subsList = srtObj.map((sub) => {\r\n      let timeLine = sub.startTime + \" --> \" + sub.endTime;\r\n      return [sub.number, timeLine, sub.text].join(\"\\n\");\r\n    })\r\n\r\n    return subsList.join(\"\\n\\n\");\r\n  }\r\n}\r\n\r\nmodule.exports = SRT;"],"sourceRoot":""}